#!/usr/bin/env python3

"""
Copyright 2017 Pirate Hour Productions

Author: Alan Drees

Purpose: Application class implementation for the system-backup command

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
"""

import sys
import argparse
import yaml
import os
import subprocess
import re

class SystemBackup:

    def __init__(self, args):
        """
        SystemBackup application class constructor

        @param self (object) object reference
        @param args (Argparse.Namespace) application arguments

        @returns None
        """
        app_config = args['app_config']
        host_config = args['host_config']
        self.dry_run = args['dry_run']
        self.debug_command = args['debug_command']

        self.app_config  = self._load_application_config(app_config)
        self.host_config = self._load_host_config(host_config)

        pass

    def main(self, host):
        """
        Application Entry point

        @param self (object) object reference
        @param host (string) identifier of the host to run

        @returns None
        """

        if not self._rsync_bin_test():
            raise RuntimeError("specified rsync binary is invalid")

        self._run_host_backup(host)

    def _rsync_bin_test(self):
        """
        Test to ensure that the host does have the rsync binary available
        and it is executable

        @param self (object) object reference

        @returns (boolean) True if it exists, false otherwise
        """

        rsync_location = self.app_config['rsync_binary']

        if os.path.isfile(rsync_location):
            stat = os.stat(rsync_location)

            if os.access(rsync_location, os.X_OK):
                return True
            else:
                return False

        else:
            return False

    def _load_application_config(self, path):
        """
        Load the backup application configuration from the specified file

        @param self (object) object reference
        @param path (string) path to the application configuration file

        @returns (list) list of application configuration directives
        """

        config = {}

        with open(path, 'r') as config:
            config = yaml.load(config)

        return config

    def _load_host_config(self, path):
        """
        Load the backup host directives from a yaml file

        @param self (object) object reference
        @param path (string) path to the application configuration file

        @returns (list) list of host backup directive configurations
        """
        config = {}

        with open(path, 'r') as config:
            config = yaml.load(config)

        return config

    def _run_host_backup(self, host):
        """
        Run the actual rsync backup process

        @param self (object) object reference
        @param host (string) identifier of the host to run

        @returns (list) list of host configuration dictionaries
        """

        if not host in self.host_config:
            raise RuntimeError("Host not found in host configuration.")

        cfg = self.host_config[host]

        cfg_ssh_args = list(cfg['ssh_options'])

        cfg_ssh_args.append('-p ' + str(cfg['port']))

        cfg_ssh_args.extend(self.app_config['shell_command']['args'])

        rsh_cmd = self._build_ssh_command(cfg_ssh_args)

        rsync_arg_list = self._build_base_rsync_options(rsh_cmd,
                                                        cfg['rsync_options'])

        paths = cfg['paths']

        paths.extend(self.app_config['common_paths'])

        local_path = self.app_config['backup_dir_root'] + '/' + cfg['backup_dir']

        for path in paths:
            excludes = self._build_exclude_list(path['ignore'])

            path_cmd_line = list(rsync_arg_list)
            path_cmd_line.extend(excludes)

            remote_path = path['path']

            cmd_return = self._execute_rsync_command(path_cmd_line,
                                                     cfg['host'],
                                                     remote_path,
                                                     local_path)

            if not cmd_return:
                raise RuntimeError("rsync command returned non-zero")

        packagelist_contents = self._get_packagelist(cfg['host'], cfg_ssh_args)

    def _build_ssh_command(self, args):
        """
        Combines the global ssh commands from the app config with the
        host ssh commands in the host config

        @param self (object) object reference
        @param host_args (list) list of arguments

        @returns (list) a combined list of both argument lists
        """

        rsh_cmd = self.app_config['shell_command']['command'] + ' ' + ' '.join(args)

        return rsh_cmd

    def _build_base_rsync_options(self, rsh_cmd, host_options):
        """
        Build a list of arguments to pass to the rsync command

        @param self (object) object reference
        @param rsh_cmd (string) --rsh parameter to use
        @param host_options (list) list of options from the host block

        @returns (list) List of arguments to pass to rsync
        """

        shell_command = '--rsh=' + rsh_cmd

        options = [shell_command]

        options.extend(host_options)

        options.extend(self.app_config['default_arguments'])

        if self.dry_run:
            options.append('--dry-run')

        return options


    def _build_exclude_list(self, paths):
        """
        Returns a list of exception command line arguments to pass to the rsync command

        @param self (object) object reference
        @param paths (list) list of paths to build exceptions for
        """

        paths.extend(self.app_config['global_ignores'])

        excludes = ['--exclude=' + e for e in paths]

        return excludes

    def _execute_rsync_command(self, options, host, remote_path, local_host_path):
        """
        Executes the rsync command with the given options on the remote and local paths

        @param self (object) object reference
        @param options (list) compiled list of command line options to use
        @param host (string) hostname of the system to be rsync'd
        @param remote_path (string) the remote path which should be backed up
        @param local_host_path (string) the local base path which the remote should be rsync'd to

        @returns (boolean) True on success False otherwise
        """

        binary = self.app_config['rsync_binary']

        remote_path = host + ":" + remote_path

        options.append(remote_path)
        options.append(local_host_path)

        options.insert(0, binary)

        command = tuple(options)

        if self.debug_command:
            print(command)
            return True

        try:
            subprocess.check_call(command)
        except subprocess.CalledProcessError:
            return False

        return True

    def _get_packagelist(self, host, ssh_command):
        """
        Get the list of installed packages on the host system, and put that in a file

        @param self (object) object reference
        @param host (string) host to get the packagelist from
        @param ssh_command (list) list of ssh command parameters

        @returns (string) containing the contents of the packagelist
        """

        command = ssh_command

        command.insert(0, self.app_config['shell_command']['command'])

        command.append(host)

        command.append('dpkg')

        command.append('--get-selections')

        if self.debug_command:
            print(command)

        return subprocess.check_output(command)

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Execute or test a System Backup")

    parser.add_argument('--dry-run',
                        dest="dry_run",
                        action="store_true",
                        help="Run the rsync commands in dry-run mode")

    parser.add_argument('--host-config',
                        dest="host_config",
                        default="./host_config.yml",
                        help="Provide a path to an alternate host configuration file")

    parser.add_argument('--app-config',
                        dest="app_config",
                        default="./app_config.yml",
                        help="Provide a path to an alternate app configuration file.")

    parser.add_argument('--dbg-cmd',
                        dest="debug_command",
                        action="store_true",
                        help="Output the rsync command and exit before executing rsync.")

    parser.add_argument('--generate-host-config',
                        dest="generate_host_config",
                        action="store_true",
                        help="Generate a standard host configuration. Unimplemented.")

    parser.add_argument('--generate-app-config',
                        dest="generate_app_config",
                        action="store_true",
                        help="Generate a default application configuration. Unimplemented.")

    parser.add_argument('--test-app-conf',
                        dest="test_app_conf",
                        action="store_true",
                        help="Test application configuration. Unimplemented.")

    parser.add_argument('--test-host-conf',
                        dest="test_host_syntax",
                        action="store_true",
                        help="Test host configuration. Unimplemented.")

    parser.add_argument('host',
                        help="Host to execute backup directives for")

    args = vars(parser.parse_args())

    app = SystemBackup(args)

    app.main(args['host'])

#!/usr/bin/env python3

"""
Copyright 2017 Pirate Hour Productions

Author: Alan Drees

Purpose: Application class implementation for the system-backup command

"""

import sys
import argparse
import yaml
import os
import subprocess

class SystemBackup:

    def __init__(self, args):
        """
        SystemBackup application class constructor

        @param self (object) object reference
        @param args (Argparse.Namespace) application arguments

        @returns None
        """
        app_config = args['app_config']
        host_config = args['host_config']
        self.dry_run = args['dry_run']

        self.app_config  = self._load_application_config(app_config)
        self.host_config = self._load_host_config(host_config)

        pass

    def main(self, host):
        """
        Application Entry point

        @param self (object) object reference
        @param host (string) identifier of the host to run

        @returns None
        """

        if not self._rsync_bin_test():
            raise RuntimeError("specified rsync binary is invalid")

        self._run_host_backup(host)

    def _rsync_bin_test(self):
        """
        Test to ensure that the host does have the rsync binary available
        and it is executable

        @param self (object) object reference

        @returns (boolean) True if it exists, false otherwise
        """

        rsync_location = self.app_config['rsync_binary']

        if os.path.isfile(rsync_location):
            stat = os.stat(rsync_location)

            if os.access(rsync_location, os.X_OK):
                return True
            else:
                return False

        else:
            return False

    def _load_application_config(self, path):
        """
        Load the backup application configuration from the specified file

        @param self (object) object reference
        @param path (string) path to the application configuration file

        @returns (list) list of application configuration directives
        """

        config = {}

        with open(path, 'r') as config:
            config = yaml.load(config)

        return config

    def _load_host_config(self, path):
        """
        Load the backup host directives from a yaml file

        @param self (object) object reference
        @param path (string) path to the application configuration file

        @returns (list) list of host backup directive configurations
        """
        config = {}

        with open(path, 'r') as config:
            config = yaml.load(config)

        return config

    def _run_host_backup(self, host):
        """
        Run the actual rsync backup process

        @param self (object) object reference
        @param host (string) identifier of the host to run

        @returns (list) list of host configuration dictionaries
        """

        if not host in self.host_config:
            raise RuntimeError("Host not found in host configuration.")

        config = self.host_config[host]

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="Execute or test a System Backup")

    parser.add_argument('--dry-run',
                        dest="dry_run",

                        action="store_true",
                        help="Run the rsync commands in dry-run mode")

    parser.add_argument('--host-config',
                        dest="host_config",
                        default="./host_config.yml",
                        help="Provide a path to an alternate host configuration file")

    parser.add_argument('--app-config',
                        dest="app_config",
                        default="./app_config.yml",
                        help="Provide a path to an alternate app configuration file.")

    parser.add_argument('--generate-host-config',
                        dest="generate_host_config",
                        action="store_true",
                        help="Generate a standard host configuration. Unimplemented.")

    parser.add_argument('--generate-app-config',
                        dest="generate_app_config",
                        action="store_true",
                        help="Generate a default application configuration. Unimplemented.")

    parser.add_argument('--test-app-conf',
                        dest="test_app_conf",
                        action="store_true",
                        help="Test application configuration. Unimplemented.")

    parser.add_argument('--test-host-conf',
                        dest="test_host_syntax",
                        action="store_true",
                        help="Test host configuration. Unimplemented.")

    parser.add_argument('host',
                        help="Host to execute backup directives for")

    args = vars(parser.parse_args())

    app = SystemBackup(args)

    app.main(args['host'])
